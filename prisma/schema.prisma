// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique(map: "email") @db.VarChar(50)
  name           String   @db.VarChar(20)
  gender         String   @db.VarChar(10)
  age            Int
  address        String   @db.VarChar(40)
  detailAddress  String?  @map("spec_address") @db.VarChar(40)
  phoneNumber    String   @map("phone_num") @db.VarChar(13)
  status         String   @db.VarChar(15)  @default("활동중")
  inactiveDate   DateTime?@map("inactive_date") @db.DateTime(6)
  socialType     String   @map("social_type") @db.VarChar(10) @default("이메일")
  createdAt      DateTime @map("created_at") @db.DateTime(6) @default(now())
  updatedAt      DateTime @map("updated_at") @db.DateTime(6) @default(now())
  point          Int      @default(0)
  favoriteCategories  UserFavorCategory[] 
  reviews Review[]
  @@map("user")
}

model FoodCategory {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  userFavorCategories UserFavorCategory[]

  @@map("food_category")
}

model UserFavorCategory {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int          @map("food_category_id")

  @@index([foodCategoryId], map: "f_category_id")
  @@index([userId], map: "user_id")
  @@map("user_favor_category")
}

model Store{
  id             Int      @id @default(autoincrement())
  regionId      Int       @map("region_id")
  region         Region   @relation(fields: [regionId], references: [id]) 
  name           String   @db.VarChar(20)
  address        String   @db.VarChar(40)
  score          Int      @default(0)
  createdAt      DateTime @map("created_at") @db.DateTime(6) @default(now())
  updatedAt      DateTime @map("updated_at") @db.DateTime(6) @default(now())
  reviews Review[]
  missions Mission[]
  @@map("store")
}

model Region{
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(20)
  stores         Store[]

  @@map("region")
}

model Review{
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @map("user_id")
  store          Store    @relation(fields: [storeId], references: [id])
  storeId         Int       @map("store_id")
  body          String     @db.VarChar(100)
  score           Int     
  createdAt      DateTime @map("created_at") @db.DateTime(6) @default(now())

  @@map("review")
}

model Mission{
  id             Int      @id @default(autoincrement())
  store          Store    @relation(fields: [storeId], references: [id])
  storeId         Int       @map("store_id")
  reward           Int     
   missionSpec   String    @map("mission_spec") @db.VarChar(100)
   deadline      DateTime @db.DateTime(6) 
  createdAt      DateTime @map("created_at") @db.DateTime(6) @default(now())
updataedAt      DateTime @map("updataed_at") @db.DateTime(6) @default(now())
  @@map("mission")
  
}